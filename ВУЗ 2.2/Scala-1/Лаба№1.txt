Задание №1

 def nth(x: Int, list: List[Int]): Unit = {
        print(list(x))
    }

 val nums = List(1, 2, 3, 4, 5)
 val n = 2
 println(nums(2))

 nth(n-1,nums)




Задание №2

  var nums = List(1,2,3,4,5)

  println(nums.reverse)




Задание №3


var list = List(1,2,3,4,5,6,7,8)

var r = list.drop(2)
print(r)


def kisk (x:Int, y:Int, kist:List[Int]): Unit =
{
  var lisk = List[Int]()
  var r = 1

  for (i <- 0 until  (kist.length-1))
    {
      if ((kist(i)>x) && (kist(i)<y))
        {
          r = kist(i)
          lisk = lisk :+ r
        }
    }
  println(lisk)
}
kisk(3,6,list)



//////////////////////////////
var Listik = List(1,2,3,4,5,6,7,8)

var h = Listik.drop(3)
var t = Listik.take(6-1)



Задание №4

val nums = 1 :: (5 :: Nil)

val n1 = nums.head + 1

val n2 = nums.tail
val n3 = n2.head - 1

for (i <- n1 to n3)
  {
    print(i)
  }

  def range (x:Int, y:Int): Unit = {
    for (i <- x to y) {
      print(i)
    }
  }
val r = 1
val s = 5
range(r+1,s-1)



Задание №5

val list = (19,24)

var x:Int = 18
var x2:Int = 72
var otvet:Int = 0

for(i<-0 to 1)
  {
    println()
  }

for (i<- 1 to x)
{
  if (x % i == 0)
  {
    if (x2 % i == 0)
      {
        otvet = i
      }
  }
}

print (otvet)



Задание №6

def rotatedView(i:Int)=Seq(1,2,3,4,5).drop(i)++Seq(1,2,3,4,5).take(i)
rotatedView(3)



Задание №7

import math._
var x0: Double = 2
var x1: Double = 10
var e: Double = 0.001
var x: Double = method_chord(x0, x1, e):Double
println(x)

def method_chord(x_prev: Double, x_curr: Double, e: Double):Double =
{
  var x_next: Double = 0
  var tmp: Double = 0
  var x9:Double = x_prev
  var x8:Double = x_curr
  do
  {
    tmp = x_next
    x_next = x8 - f(x8) * (x9 - x8) / (f(x9) - f(x8))
    x9 = x8
    x8 = tmp
  }while (Math.abs(x_next - x8) > e);
}

def f(x:Double):Double =
{
  Math.pow(x,3) - 18*x - 83
}